name: Changelog

permissions:
    contents: write
    pull-requests: write

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
    push:
        # Only run when src/ *.js change
        paths:
            - 'src/**/*.js'
    pull_request:
        # Only act on merged PRs that touched src/ *.js
        types: [closed]
        paths:
            - 'src/**/*.js'
    workflow_dispatch:

jobs:
    changelog:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Determine changed src/ .js files
              id: src_changes
              shell: bash
              run: |
                  set -euo pipefail
                  EVENT_NAME="${{ github.event_name }}"

                  if [ "$EVENT_NAME" = "pull_request" ]; then
                    BASE_REF="${{ github.event.pull_request.base.sha }}"
                    # Prefer merge commit when available (squash/rebase-friendly), else fall back to head
                    if [ -n "${{ github.event.pull_request.merge_commit_sha }}" ] && [ "${{ github.event.pull_request.merge_commit_sha }}" != "null" ]; then
                      HEAD_REF="${{ github.event.pull_request.merge_commit_sha }}"
                    else
                      HEAD_REF="${{ github.event.pull_request.head.sha }}"
                    fi
                  else
                    BASE_REF="${{ github.event.before }}"
                    HEAD_REF="${{ github.sha }}"
                  fi

                  # Compute changed files and keep ONLY src/**/*.js
                  CHANGED_FILES="$(git diff --name-only "$BASE_REF" "$HEAD_REF" | grep -E '^src/.*\.js$' || true)"

                  {
                    echo "changed_files<<EOF"
                    echo "$CHANGED_FILES"
                    echo "EOF"
                  } >> "$GITHUB_OUTPUT"

                  if [ -n "$CHANGED_FILES" ]; then
                    echo "Detected src/ JS changes:"
                    echo "$CHANGED_FILES"
                  else
                    echo "No src/ .js changes detected."
                  fi

            - name: Prepare changelog entry payload
              id: payload
              if: |
                  steps.src_changes.outputs.changed_files != '' &&
                  (
                    github.event_name == 'push' ||
                    (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
                  )
              shell: bash
              run: |
                  set -euo pipefail

                  # Use user's timezone (America/Chicago) like your example
                  DATE="$(TZ=America/Chicago date '+%Y-%m-%d %H:%M:%S')"
                  AUTHOR="${{ github.actor }}"
                  REPO="${{ github.repository }}"
                  EVENT_NAME="${{ github.event_name }}"

                  if [ "$EVENT_NAME" = "pull_request" ]; then
                    COMMIT="${{ github.event.pull_request.merge_commit_sha }}"
                    # Fallback for squash/rebase merges where merge_commit_sha may be null
                    if [ -z "${COMMIT:-}" ] || [ "${COMMIT:-null}" = "null" ]; then
                      COMMIT="${{ github.event.pull_request.head.sha }}"
                    fi
                    TITLE="${{ github.event.pull_request.title }}"
                    BODY="${{ github.event.pull_request.body }}"
                  else
                    COMMIT="${{ github.sha }}"
                    TITLE="$(git log -1 --pretty=%s)"
                    BODY="$(git log -1 --pretty=%b)"
                  fi

                  # Collect issue numbers closed via closing keywords in commit/PR text
                  # (close(s|d)?|fix(e[sd])?|resolve(s|d)?) #123
                  if [ "$EVENT_NAME" = "pull_request" ]; then
                    TEXT="$TITLE"$'\n'"$BODY"
                  else
                    TEXT="$(git log -1 --pretty=%s%n%b)"
                  fi

                  CLOSED_ISSUES="$(
                    printf '%s' "$TEXT" \
                      | grep -oiE '(close[sd]?|fix(e[sd])?|resolve[sd]?) #[0-9]+' \
                      | grep -oE '#[0-9]+' \
                      | tr -d '#' \
                      | sort -u || true
                  )"

                  {
                    echo "title<<EOF"
                    echo "$TITLE"
                    echo "EOF"
                    echo "body<<EOF"
                    echo "$BODY"
                    echo "EOF"
                    echo "commit=$COMMIT"
                    echo "author=$AUTHOR"
                    echo "date=$DATE"
                    echo "closed_issues=$CLOSED_ISSUES"
                  } >> "$GITHUB_OUTPUT"

            - name: Build entry file (Commits section)
              id: entry
              if: |
                  steps.src_changes.outputs.changed_files != '' &&
                  (
                    github.event_name == 'push' ||
                    (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
                  )
              shell: bash
              run: |
                  set -euo pipefail

                  : > changelog.tmp
                  # Heading exactly like your sample: "### <title>"
                  echo "### 🟢 ${{ steps.payload.outputs.title }}" >> changelog.tmp
                  echo "" >> changelog.tmp

                  # Bullet lines exactly as requested (no PR link, no body, no separators)
                  echo "- 🟢 *Commit:* [${{ steps.payload.outputs.commit }}](https://github.com/${{ github.repository }}/commit/${{ steps.payload.outputs.commit }})" >> changelog.tmp
                  echo "- 👤 *Author:* ${{ steps.payload.outputs.author }}" >> changelog.tmp
                  echo "- 📅 *Date:* ${{ steps.payload.outputs.date }}" >> changelog.tmp
                  echo "- 📦 *Changed src/ JS files:*" >> changelog.tmp

                  # List changed files with two-space indent then dash
                  while IFS= read -r file; do
                    [ -n "$file" ] && echo "  - $file" >> changelog.tmp
                  done <<< "${{ steps.src_changes.outputs.changed_files }}"

            - name: Ensure CHANGELOG.md skeleton and append sections
              id: apply_changelog
              if: |
                  steps.src_changes.outputs.changed_files != '' &&
                  (
                    github.event_name == 'push' ||
                    (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
                  )
              shell: bash
              run: |
                  set -euo pipefail

                  if [ ! -f CHANGELOG.md ]; then
                    {
                      echo "# Changelog"
                      echo ""
                      echo "## Commits"
                      echo ""
                      echo "## Issues (closed)"
                      echo ""
                      echo "## Pull Requests (approved)"
                      echo ""
                    } > CHANGELOG.md
                  else
                    if ! grep -q '^# Changelog' CHANGELOG.md; then
                      printf "# Changelog\n%s" "$(cat CHANGELOG.md)" > CHANGELOG.md
                    fi
                    for section in "## Commits" "## Issues (closed)" "## Pull Requests (approved)"; do
                      if ! grep -q "^$section" CHANGELOG.md; then
                        printf "%s\n\n" "$section" >> CHANGELOG.md
                      fi
                    done
                  fi

                  # Dedupe by the commit line (serves as a primary key)
                  DEDUP_TOKEN="- \ud83d\udfe2 *Commit:* [${{ steps.payload.outputs.commit }}](https://github.com/${{ github.repository }}/commit/${{ steps.payload.outputs.commit }})"
                  if ! grep -Fq "$DEDUP_TOKEN" CHANGELOG.md; then
                    awk 'BEGIN{skip=0} /^## Commits/{print; print ""; system("cat changelog.tmp"); print ""; skip=1; next} skip==1 && NF==0{skip=0; next} {print}' CHANGELOG.md > .chlog.tmp && mv .chlog.tmp CHANGELOG.md
                  else
                    echo "Entry for this commit already present; skipping append."
                  fi

                  # If this run is from a merged PR, add PR entry (idempotent)
                  if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                    PR_NUMBER="${{ github.event.pull_request.number }}"
                    PR_TITLE="${{ github.event.pull_request.title }}"
                    PR_AUTHOR="${{ github.event.pull_request.user.login }}"
                    PR_URL="https://github.com/${{ github.repository }}/pull/$PR_NUMBER"
                    PR_ENTRY="$(printf "### 🚀 [%s](%s) by @%s\n- 🔀 PR #%s was approved and merged. ✅\n" "$PR_TITLE" "$PR_URL" "$PR_AUTHOR" "$PR_NUMBER")"
                    if ! grep -Fq "$PR_ENTRY" CHANGELOG.md; then
                      awk '/^## Pull Requests \(approved\)/{print;print "";system("printf \"%s\" \"$PR_ENTRY\"");next}1' CHANGELOG.md > .pr.tmp && mv .pr.tmp CHANGELOG.md
                    fi
                  fi

                  # Add closed issues referenced via closing keywords (idempotent)
                  for ISSUE in ${{ steps.payload.outputs.closed_issues }}; do
                    ISSUE_URL="https://github.com/${{ github.repository }}/issues/$ISSUE"
                    ISSUE_ENTRY="$(printf "### ✅ [Issue #%s](%s) closed 🛠️\n" "$ISSUE" "$ISSUE_URL")"
                    if ! grep -Fq "$ISSUE_ENTRY" CHANGELOG.md; then
                      awk '/^## Issues \(closed\)/{print;print "";system("printf \"%s\" \"$ISSUE_ENTRY\"");next}1' CHANGELOG.md > .issues.tmp && mv .issues.tmp CHANGELOG.md
                    fi
                  done

                  # Cleanup temp file (avoid untracked noise)
                  rm -f changelog.tmp

            - name: Detect changelog modifications
              id: changelog_changed
              shell: bash
              run: |
                  if ! git diff --quiet -- CHANGELOG.md; then
                    echo "changed=true" >> "$GITHUB_OUTPUT"
                    echo "CHANGELOG.md modified."
                  else
                    echo "changed=false" >> "$GITHUB_OUTPUT"
                    echo "CHANGELOG.md not modified; skipping PR."
                  fi

            - name: Create PR for CHANGELOG.md
              id: cpr
              if: steps.changelog_changed.outputs.changed == 'true'
              uses: peter-evans/create-pull-request@v6
              with:
                  branch: chore/changelog-${{ github.run_id }}
                  commit-message: 'chore(changelog): update for src/ JS changes'
                  title: 'Update CHANGELOG for src/ JS changes'
                  body: |
                      This automated PR updates **CHANGELOG.md** for:
                      - Commits that modify src/ `*.js` files
                      - Merged PRs that modify src/ `*.js` files
                      - Issues auto-closed via closing keywords in those commits/PRs
                  add-paths: |
                      CHANGELOG.md

            - name: Enable auto-merge (merge commit)
              if: steps.cpr.outputs.pull-request-number && steps.changelog_changed.outputs.changed == 'true'
              uses: peter-evans/enable-pull-request-automerge@v3
              continue-on-error: true
              with:
                  pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
                  merge-method: merge
