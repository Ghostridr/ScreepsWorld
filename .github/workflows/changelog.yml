name: Changelog Tracker

on:
  push:
    paths:
      - '*.js'
  pull_request:
    paths:
      - '*.js'

jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed root JS files
        id: root_changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_REF=${{ github.event.pull_request.base.sha }}
            HEAD_REF=${{ github.event.pull_request.head.sha }}
          else
            BASE_REF=${{ github.event.before }}
            HEAD_REF=${{ github.sha }}
          fi
          CHANGED_FILES=$(git diff --name-only "$BASE_REF" "$HEAD_REF" | grep -E '^[^/]+\.js$' || true)
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Format changelog entry
        id: changelog_entry
        if: steps.root_changes.outputs.changed_files != ''
        run: |
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          COMMIT=${{ github.sha }}
          AUTHOR=${{ github.actor }}
          TITLE=$(git log -1 --pretty=%s)
          BODY=$(git log -1 --pretty=%b)
          # Find PR number if event is PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            PR_LINK="[PR #$PR_NUMBER](https://github.com/${{ github.repository }}/pull/$PR_NUMBER)"
          else
            PR_LINK=""
          fi
          # Find issue references in commit title
          ISSUE_LINKS=""
          for issue in $(echo "$TITLE" | grep -oE '#[0-9]+'); do
            num=$(echo $issue | tr -d '#')
            ISSUE_LINKS="$ISSUE_LINKS [Issue $issue](https://github.com/${{ github.repository }}/issues/$num)"
          done
          echo "---" >> changelog.tmp
          echo "**$TITLE** $PR_LINK $ISSUE_LINKS" >> changelog.tmp
          if [ -n "$BODY" ]; then
            echo "" >> changelog.tmp
            echo "$BODY" >> changelog.tmp
          fi
          echo "" >> changelog.tmp
          echo "*Commit:* [$COMMIT](https://github.com/${{ github.repository }}/commit/$COMMIT)" >> changelog.tmp
          echo "*Author:* $AUTHOR" >> changelog.tmp
          echo "*Date:* $DATE" >> changelog.tmp
          echo "*Changed root JS files:*" >> changelog.tmp
          for file in ${{ steps.root_changes.outputs.changed_files }}; do
            echo "  - $file" >> changelog.tmp
          done
          echo "---" >> changelog.tmp

      - name: Ensure CHANGELOG.md structure and append entries
        if: steps.root_changes.outputs.changed_files != ''
        run: |
          # Ensure CHANGELOG.md starts with "# Changelog"
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## Commits" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## Issues (closed)" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## Pull Requests (approved)" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          else
            if ! grep -q "^# Changelog" CHANGELOG.md; then
              echo -e "# Changelog\n$(cat CHANGELOG.md)" > CHANGELOG.md
            fi
            for section in "## Commits" "## Issues (closed)" "## Pull Requests (approved)"; do
              if ! grep -q "^$section" CHANGELOG.md; then
                # Only add the section if it does not already exist
                echo -e "$section\n" >> CHANGELOG.md
              fi
            done
          fi
          fi


          # Insert new commit entry under ## Commits, avoid duplicates
          NEW_COMMIT_ENTRY=$(cat changelog.tmp)
          if ! grep -Fq "$NEW_COMMIT_ENTRY" CHANGELOG.md; then
            awk '/^## Commits/{print;print "";system("cat changelog.tmp");next}1' CHANGELOG.md > temp && mv temp CHANGELOG.md
          fi

          # If this is a pull request and it was merged/approved, add to Pull Requests section, avoid duplicates
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_URL="https://github.com/${{ github.repository }}/pull/$PR_NUMBER"
            PR_ENTRY="### [$PR_TITLE]($PR_URL) by @$PR_AUTHOR\n- PR #$PR_NUMBER was approved and merged.\n"
            if ! grep -Fq "$PR_ENTRY" CHANGELOG.md; then
              awk '/^## Pull Requests \(approved\)/{print;print "";system("echo \"$PR_ENTRY\"");next}1' CHANGELOG.md > temp && mv temp CHANGELOG.md
            fi
          fi

          # If this commit closes issues, add to Issues section, avoid duplicates
          CLOSED_ISSUES=$(git log -1 --pretty=%s | grep -oE '#[0-9]+' | tr -d '#')
          for ISSUE in $CLOSED_ISSUES; do
            ISSUE_URL="https://github.com/${{ github.repository }}/issues/$ISSUE"
            ISSUE_ENTRY="### [Issue #$ISSUE]($ISSUE_URL) closed\n"
            if ! grep -Fq "$ISSUE_ENTRY" CHANGELOG.md; then
              awk '/^## Issues \(closed\)/{print;print "";system("echo \"$ISSUE_ENTRY\"");next}1' CHANGELOG.md > temp && mv temp CHANGELOG.md
            fi
          done

      - name: Commit and push CHANGELOG.md
        if: github.event_name == 'push' && steps.root_changes.outputs.changed_files != ''
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git pull --rebase origin master
          git add CHANGELOG.md
          git commit -m "update CHANGELOG.md for root file changes"
          git push origin master