name: Changelog Tracker

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    # Only run when any JS files change (filter to ROOT *.js in-script)
    paths:
      - '*.js'
    paths-ignore:
      - 'CHANGELOG.md'
  pull_request:
    types: [closed]
    paths:
      - '*.js'
  workflow_dispatch:

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed ROOT .js files
        id: root_changes
        shell: bash
        run: |
          set -euo pipefail
          EVENT_NAME="${{ github.event_name }}"

          if [ "$EVENT_NAME" = "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
          else
            BASE_REF="${{ github.event.before }}"
            HEAD_REF="${{ github.sha }}"
          fi

          # Compute changed files and keep ONLY root-level *.js (no slashes)
          CHANGED_FILES="$(git diff --name-only "$BASE_REF" "$HEAD_REF" | grep -E '^[^/]+\.js$' || true)"

          {
            echo "changed_files<<EOF"
            echo "$CHANGED_FILES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          if [ -n "$CHANGED_FILES" ]; then
            echo "Detected root JS changes:"
            echo "$CHANGED_FILES"
          else
            echo "No root-level .js changes detected."
          fi

      - name: Prepare changelog entry payload
        id: payload
        if: |
          steps.root_changes.outputs.changed_files != '' &&
          (
            github.event_name == 'push' ||
            (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
          )
        shell: bash
        run: |
          set -euo pipefail

          DATE="$(date '+%Y-%m-%d %H:%M:%S')"
          AUTHOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
          EVENT_NAME="${{ github.event_name }}"

          if [ "$EVENT_NAME" = "pull_request" ]; then
            COMMIT="${{ github.event.pull_request.merge_commit_sha }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            TITLE="${{ github.event.pull_request.title }}"
            BODY="${{ github.event.pull_request.body }}"
            PR_LINK="[PR #$PR_NUMBER](https://github.com/${REPO}/pull/$PR_NUMBER)"
            MERGED="${{ github.event.pull_request.merged }}"
          else
            COMMIT="${{ github.sha }}"
            PR_NUMBER=""
            PR_LINK=""
            TITLE="$(git log -1 --pretty=%s)"
            BODY="$(git log -1 --pretty=%b)"
            MERGED=""
          fi

          # Collect issue numbers closed by this commit/PR via closing keywords
          # (fix(es|ed)?|close(s|d)?|resolve(s|d)?) #123
          if [ "$EVENT_NAME" = "pull_request" ]; then
            TEXT="$TITLE"$'\n'"$BODY"
          else
            TEXT="$(git log -1 --pretty=%s%n%b)"
          fi

          CLOSED_ISSUES="$(printf '%s' "$TEXT" \
            | grep -oiE '(close[sd]?|fix(e[sd])?|resolve[sd]?) #[0-9]+' \
            | grep -oE '#[0-9]+' \
            | tr -d '#' \
            | sort -u || true)"

          {
            echo "title<<EOF"
            echo "$TITLE"
            echo "EOF"
            echo "body<<EOF"
            echo "$BODY"
            echo "EOF"
            echo "pr_link=$PR_LINK"
            echo "commit=$COMMIT"
            echo "author=$AUTHOR"
            echo "date=$DATE"
            echo "closed_issues=$CLOSED_ISSUES"
          } >> "$GITHUB_OUTPUT"

      - name: Build entry file (Commits section)
        id: entry
        if: |
          steps.root_changes.outputs.changed_files != '' &&
          (
            github.event_name == 'push' ||
            (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
          )
        shell: bash
        run: |
          set -euo pipefail

          : > changelog.tmp
          echo "---" >> changelog.tmp
          echo "**${{ steps.payload.outputs.title }}** ${{ steps.payload.outputs.pr_link }}" >> changelog.tmp
          if [ -n "${{ steps.payload.outputs.body }}" ]; then
            echo "" >> changelog.tmp
            # Body may contain markdown; write as-is
            printf "%s\n" "${{ steps.payload.outputs.body }}" >> changelog.tmp
          fi
          echo "" >> changelog.tmp
          echo "*Commit:* [${{ steps.payload.outputs.commit }}](https://github.com/${{ github.repository }}/commit/${{ steps.payload.outputs.commit }})" >> changelog.tmp
          echo "*Author:* ${{ steps.payload.outputs.author }}" >> changelog.tmp
          echo "*Date:* ${{ steps.payload.outputs.date }}" >> changelog.tmp
          echo "*Changed root JS files:*" >> changelog.tmp
          while IFS= read -r file; do
            [ -n "$file" ] && echo "  - $file" >> changelog.tmp
          done << 'EOF_FILES'
          ${{
            steps.root_changes.outputs.changed_files
          }}
            EOF_FILES
          echo "---" >> changelog.tmp

      - name: Ensure CHANGELOG.md skeleton and append sections
        if: |
          steps.root_changes.outputs.changed_files != '' &&
          (
            github.event_name == 'push' ||
            (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
          )
        shell: bash
        run: |
          set -euo pipefail

          if [ ! -f CHANGELOG.md ]; then
            {
              echo "# Changelog"
              echo ""
              echo "## Commits"
              echo ""
              echo "## Issues (closed)"
              echo ""
              echo "## Pull Requests (approved)"
              echo ""
            } > CHANGELOG.md
          else
            if ! grep -q '^# Changelog' CHANGELOG.md; then
              printf "# Changelog\n%s" "$(cat CHANGELOG.md)" > CHANGELOG.md
            fi
            for section in "## Commits" "## Issues (closed)" "## Pull Requests (approved)"; do
              if ! grep -q "^$section" CHANGELOG.md; then
                printf "%s\n\n" "$section" >> CHANGELOG.md
              fi
            done
          fi

          # Insert new commit entry under ## Commits (idempotent)
          NEW_COMMIT_ENTRY="$(cat changelog.tmp)"
          if ! grep -Fq "$NEW_COMMIT_ENTRY" CHANGELOG.md; then
            awk '/^## Commits/{print;print "";system("cat changelog.tmp");next}1' CHANGELOG.md > .chlog.tmp && mv .chlog.tmp CHANGELOG.md
          fi

          # If this run is from a merged PR, add PR entry (idempotent)
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_URL="https://github.com/${{ github.repository }}/pull/$PR_NUMBER"
            PR_ENTRY="$(printf "### [%s](%s) by @%s\n- PR #%s was approved and merged.\n" "$PR_TITLE" "$PR_URL" "$PR_AUTHOR" "$PR_NUMBER")"
            if ! grep -Fq "$PR_ENTRY" CHANGELOG.md; then
              awk '/^## Pull Requests \(approved\)/{print;print "";system("printf \"%s\" \"$PR_ENTRY\"");next}1' CHANGELOG.md > .pr.tmp && mv .pr.tmp CHANGELOG.md
            fi
          fi

          # Add closed issues referenced via closing keywords (idempotent)
          for ISSUE in ${{ steps.payload.outputs.closed_issues }}; do
            ISSUE_URL="https://github.com/${{ github.repository }}/issues/$ISSUE"
            ISSUE_ENTRY="$(printf "### [Issue #%s](%s) closed\n" "$ISSUE" "$ISSUE_URL")"
            if ! grep -Fq "$ISSUE_ENTRY" CHANGELOG.md; then
              awk '/^## Issues \(closed\)/{print;print "";system("printf \"%s\" \"$ISSUE_ENTRY\"");next}1' CHANGELOG.md > .issues.tmp && mv .issues.tmp CHANGELOG.md
            fi
          done

      - name: Create PR for CHANGELOG.md
        if: |
          steps.root_changes.outputs.changed_files != '' &&
          (
            github.event_name == 'push' ||
            (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
          )
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/changelog-${{ github.run_id }}
          commit-message: "chore(changelog): update for root JS changes"
          title: "Update CHANGELOG for root JS changes"
          body: |
            This automated PR updates **CHANGELOG.md** for:
            - Commits that modify root-level `*.js` files
            - Merged PRs that modify root-level `*.js` files
            - Issues auto-closed via closing keywords in those commits/PRs
          add-paths: |
            CHANGELOG.md
